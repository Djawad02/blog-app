// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  designation String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  username    String     @unique
  password    String
  blogs       Blog[] //for 1-M relation
  categories  Category[]
  tags        Tag[]
}

model Blog {
  id         Int                @id @default(autoincrement())
  title      String             @db.VarChar(255)
  content    String             @db.Text
  authorId   Int
  author     User               @relation(fields: [authorId], references: [id])
  createdAt  DateTime           @default(now()) @db.Timestamp(0)
  updatedAt  DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  imagePath  String?            @db.VarChar(255)
  categories blogs_categories[]
  tags       blogs_tags[]
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String             @unique @db.VarChar(255)
  createdAt DateTime           @default(now()) @db.Timestamp(0)
  updatedAt DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  authorId  Int?
  author    User?              @relation(fields: [authorId], references: [id])
  blogs     blogs_categories[]
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique @db.VarChar(255)
  createdAt DateTime     @default(now()) @db.Timestamp(0)
  updatedAt DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  authorId  Int?
  author    User?        @relation(fields: [authorId], references: [id])
  blogs     blogs_tags[]
}

model blogs_categories {
  blogId     Int
  categoryId Int
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogId, categoryId])
}

model blogs_tags {
  blogId Int
  tagId  Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogId, tagId])
}
